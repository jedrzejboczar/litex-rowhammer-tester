READER
======



DMA DRAM reader.

Allows to check DRAM contents against a predefined pattern using DMA.

Pattern
-------


Provides RAM to store access pattern: `mem_addr` and `mem_data`.
The pattern address space can be limited using the `data_mask`.

For example, having `mem_adr` filled with `[ 0x04, 0x02, 0x03, ... ]`
and `mem_data` filled with `[ 0xff, 0xaa, 0x55, ... ]` and setting
`data_mask = 0b01`, the pattern [(address, data), ...] written will be:
`[(0x04, 0xff), (0x02, 0xaa), (0x04, 0xff), ...]` (wraps due to masking).

DRAM memory range that is being accessed can be configured using `mem_mask`.

To use this module, make sure that `ready` is 1, then write the desired
number of transfers to `count`. Writing to the `start` CSR will initialize
the operation. When the operation is ongoing `ready` will be 0.


Reading errors
--------------

This module allows to check the locations of errors in the memory.
It scans the configured memory area and compares the values read to
the predefined pattern. If `skip_fifo` is 0, this module will stop
after each error encountered, so that it can be examined. Wait until
the `error_ready` CSR is 1. Then use the CSRs `error_offset`,
`error_data` and `error_expected` to examine the errors in the current
transfer. To continue reading, write 1 to `error_continue` CSR.
Setting `skip_fifo` to 1 will disable this behaviour entirely.

The final nubmer of errors can be read from `error_count`.
NOTE: This value represents the number of erroneous *DMA transfers*.

The current progress can be read from the `done` CSR.


Register Listing for READER
---------------------------

+------------------------------------------------------------------------+----------------------------------------------------+
| Register                                                               | Address                                            |
+========================================================================+====================================================+
| :ref:`READER_START <READER_START>`                                     | :ref:`0x82007000 <READER_START>`                   |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_READY <READER_READY>`                                     | :ref:`0x82007004 <READER_READY>`                   |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_COUNT <READER_COUNT>`                                     | :ref:`0x82007008 <READER_COUNT>`                   |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_DONE <READER_DONE>`                                       | :ref:`0x8200700c <READER_DONE>`                    |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_MEM_MASK <READER_MEM_MASK>`                               | :ref:`0x82007010 <READER_MEM_MASK>`                |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_DATA_MASK <READER_DATA_MASK>`                             | :ref:`0x82007014 <READER_DATA_MASK>`               |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_INVERTER_DIVISOR_MASK <READER_INVERTER_DIVISOR_MASK>`     | :ref:`0x82007018 <READER_INVERTER_DIVISOR_MASK>`   |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_INVERTER_SELECTION_MASK <READER_INVERTER_SELECTION_MASK>` | :ref:`0x8200701c <READER_INVERTER_SELECTION_MASK>` |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_ERROR_COUNT <READER_ERROR_COUNT>`                         | :ref:`0x82007020 <READER_ERROR_COUNT>`             |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_SKIP_FIFO <READER_SKIP_FIFO>`                             | :ref:`0x82007024 <READER_SKIP_FIFO>`               |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_ERROR_OFFSET <READER_ERROR_OFFSET>`                       | :ref:`0x82007028 <READER_ERROR_OFFSET>`            |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_ERROR_DATA3 <READER_ERROR_DATA3>`                         | :ref:`0x8200702c <READER_ERROR_DATA3>`             |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_ERROR_DATA2 <READER_ERROR_DATA2>`                         | :ref:`0x82007030 <READER_ERROR_DATA2>`             |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_ERROR_DATA1 <READER_ERROR_DATA1>`                         | :ref:`0x82007034 <READER_ERROR_DATA1>`             |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_ERROR_DATA0 <READER_ERROR_DATA0>`                         | :ref:`0x82007038 <READER_ERROR_DATA0>`             |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_ERROR_EXPECTED3 <READER_ERROR_EXPECTED3>`                 | :ref:`0x8200703c <READER_ERROR_EXPECTED3>`         |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_ERROR_EXPECTED2 <READER_ERROR_EXPECTED2>`                 | :ref:`0x82007040 <READER_ERROR_EXPECTED2>`         |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_ERROR_EXPECTED1 <READER_ERROR_EXPECTED1>`                 | :ref:`0x82007044 <READER_ERROR_EXPECTED1>`         |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_ERROR_EXPECTED0 <READER_ERROR_EXPECTED0>`                 | :ref:`0x82007048 <READER_ERROR_EXPECTED0>`         |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_ERROR_READY <READER_ERROR_READY>`                         | :ref:`0x8200704c <READER_ERROR_READY>`             |
+------------------------------------------------------------------------+----------------------------------------------------+
| :ref:`READER_ERROR_CONTINUE <READER_ERROR_CONTINUE>`                   | :ref:`0x82007050 <READER_ERROR_CONTINUE>`          |
+------------------------------------------------------------------------+----------------------------------------------------+

READER_START
^^^^^^^^^^^^

`Address: 0x82007000 + 0x0 = 0x82007000`

    Write to the register starts the transfer (if ready=1)

    .. wavedrom::
        :caption: READER_START

        {
            "reg": [
                {"name": "start", "bits": 1},
                {"bits": 31},
            ], "config": {"hspace": 400, "bits": 32, "lanes": 4 }, "options": {"hspace": 400, "bits": 32, "lanes": 4}
        }


READER_READY
^^^^^^^^^^^^

`Address: 0x82007000 + 0x4 = 0x82007004`

    Indicates that the transfer is not ongoing

    .. wavedrom::
        :caption: READER_READY

        {
            "reg": [
                {"name": "ready", "bits": 1},
                {"bits": 31},
            ], "config": {"hspace": 400, "bits": 32, "lanes": 4 }, "options": {"hspace": 400, "bits": 32, "lanes": 4}
        }


READER_COUNT
^^^^^^^^^^^^

`Address: 0x82007000 + 0x8 = 0x82007008`

    Desired number of DMA transfers

    .. wavedrom::
        :caption: READER_COUNT

        {
            "reg": [
                {"name": "count[31:0]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_DONE
^^^^^^^^^^^

`Address: 0x82007000 + 0xc = 0x8200700c`

    Number of completed DMA transfers

    .. wavedrom::
        :caption: READER_DONE

        {
            "reg": [
                {"name": "done[31:0]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_MEM_MASK
^^^^^^^^^^^^^^^

`Address: 0x82007000 + 0x10 = 0x82007010`

    DRAM address mask for DMA transfers

    .. wavedrom::
        :caption: READER_MEM_MASK

        {
            "reg": [
                {"name": "mem_mask[31:0]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_DATA_MASK
^^^^^^^^^^^^^^^^

`Address: 0x82007000 + 0x14 = 0x82007014`

    Pattern memory address mask

    .. wavedrom::
        :caption: READER_DATA_MASK

        {
            "reg": [
                {"name": "data_mask[31:0]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_INVERTER_DIVISOR_MASK
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Address: 0x82007000 + 0x18 = 0x82007018`

    Divisor mask for selecting rows for which pattern data gets inverted

    .. wavedrom::
        :caption: READER_INVERTER_DIVISOR_MASK

        {
            "reg": [
                {"name": "inverter_divisor_mask[4:0]", "bits": 5},
                {"bits": 27},
            ], "config": {"hspace": 400, "bits": 32, "lanes": 4 }, "options": {"hspace": 400, "bits": 32, "lanes": 4}
        }


READER_INVERTER_SELECTION_MASK
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

`Address: 0x82007000 + 0x1c = 0x8200701c`

    Selection mask for selecting rows for which pattern data gets inverted

    .. wavedrom::
        :caption: READER_INVERTER_SELECTION_MASK

        {
            "reg": [
                {"name": "inverter_selection_mask[31:0]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_ERROR_COUNT
^^^^^^^^^^^^^^^^^^

`Address: 0x82007000 + 0x20 = 0x82007020`

    Number of errors detected

    .. wavedrom::
        :caption: READER_ERROR_COUNT

        {
            "reg": [
                {"name": "error_count[31:0]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_SKIP_FIFO
^^^^^^^^^^^^^^^^

`Address: 0x82007000 + 0x24 = 0x82007024`

    Skip waiting for user to read the errors FIFO

    .. wavedrom::
        :caption: READER_SKIP_FIFO

        {
            "reg": [
                {"name": "skip_fifo", "bits": 1},
                {"bits": 31},
            ], "config": {"hspace": 400, "bits": 32, "lanes": 4 }, "options": {"hspace": 400, "bits": 32, "lanes": 4}
        }


READER_ERROR_OFFSET
^^^^^^^^^^^^^^^^^^^

`Address: 0x82007000 + 0x28 = 0x82007028`

    Current offset of the error

    .. wavedrom::
        :caption: READER_ERROR_OFFSET

        {
            "reg": [
                {"name": "error_offset[31:0]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_ERROR_DATA3
^^^^^^^^^^^^^^^^^^

`Address: 0x82007000 + 0x2c = 0x8200702c`

    Bits 96-127 of `READER_ERROR_DATA`. Erroneous value read from DRAM memory

    .. wavedrom::
        :caption: READER_ERROR_DATA3

        {
            "reg": [
                {"name": "error_data[127:96]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_ERROR_DATA2
^^^^^^^^^^^^^^^^^^

`Address: 0x82007000 + 0x30 = 0x82007030`

    Bits 64-95 of `READER_ERROR_DATA`.

    .. wavedrom::
        :caption: READER_ERROR_DATA2

        {
            "reg": [
                {"name": "error_data[95:64]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_ERROR_DATA1
^^^^^^^^^^^^^^^^^^

`Address: 0x82007000 + 0x34 = 0x82007034`

    Bits 32-63 of `READER_ERROR_DATA`.

    .. wavedrom::
        :caption: READER_ERROR_DATA1

        {
            "reg": [
                {"name": "error_data[63:32]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_ERROR_DATA0
^^^^^^^^^^^^^^^^^^

`Address: 0x82007000 + 0x38 = 0x82007038`

    Bits 0-31 of `READER_ERROR_DATA`.

    .. wavedrom::
        :caption: READER_ERROR_DATA0

        {
            "reg": [
                {"name": "error_data[31:0]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_ERROR_EXPECTED3
^^^^^^^^^^^^^^^^^^^^^^

`Address: 0x82007000 + 0x3c = 0x8200703c`

    Bits 96-127 of `READER_ERROR_EXPECTED`. Value expected to be read from DRAM
    memory

    .. wavedrom::
        :caption: READER_ERROR_EXPECTED3

        {
            "reg": [
                {"name": "error_expected[127:96]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_ERROR_EXPECTED2
^^^^^^^^^^^^^^^^^^^^^^

`Address: 0x82007000 + 0x40 = 0x82007040`

    Bits 64-95 of `READER_ERROR_EXPECTED`.

    .. wavedrom::
        :caption: READER_ERROR_EXPECTED2

        {
            "reg": [
                {"name": "error_expected[95:64]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_ERROR_EXPECTED1
^^^^^^^^^^^^^^^^^^^^^^

`Address: 0x82007000 + 0x44 = 0x82007044`

    Bits 32-63 of `READER_ERROR_EXPECTED`.

    .. wavedrom::
        :caption: READER_ERROR_EXPECTED1

        {
            "reg": [
                {"name": "error_expected[63:32]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_ERROR_EXPECTED0
^^^^^^^^^^^^^^^^^^^^^^

`Address: 0x82007000 + 0x48 = 0x82007048`

    Bits 0-31 of `READER_ERROR_EXPECTED`.

    .. wavedrom::
        :caption: READER_ERROR_EXPECTED0

        {
            "reg": [
                {"name": "error_expected[31:0]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_ERROR_READY
^^^^^^^^^^^^^^^^^^

`Address: 0x82007000 + 0x4c = 0x8200704c`

    Error detected and ready to read

    .. wavedrom::
        :caption: READER_ERROR_READY

        {
            "reg": [
                {"name": "error_ready", "bits": 1},
                {"bits": 31},
            ], "config": {"hspace": 400, "bits": 32, "lanes": 4 }, "options": {"hspace": 400, "bits": 32, "lanes": 4}
        }


READER_ERROR_CONTINUE
^^^^^^^^^^^^^^^^^^^^^

`Address: 0x82007000 + 0x50 = 0x82007050`

    Continue reading until the next error

    .. wavedrom::
        :caption: READER_ERROR_CONTINUE

        {
            "reg": [
                {"name": "error_continue", "bits": 1},
                {"bits": 31},
            ], "config": {"hspace": 400, "bits": 32, "lanes": 4 }, "options": {"hspace": 400, "bits": 32, "lanes": 4}
        }



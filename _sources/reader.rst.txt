READER
======



DMA DRAM reader.

Allows to check DRAM contents against a predefined pattern using DMA.

Pattern
-------


Provides RAM to store access pattern: `mem_addr` and `mem_data`.
The pattern address space can be limited using the `data_mask`.

For example, having `mem_adr` filled with `[ 0x04, 0x02, 0x03, ... ]`
and `mem_data` filled with `[ 0xff, 0xaa, 0x55, ... ]` and setting
`data_mask = 0b01`, the pattern [(address, data), ...] written will be:
`[(0x04, 0xff), (0x02, 0xaa), (0x04, 0xff), ...]` (wraps due to masking).

DRAM memory range that is being accessed can be configured using `mem_mask`.

To use this module, make sure that `ready` is 1, then write the desired
number of transfers to `count`. Writing to the `start` CSR will initialize
the operation. When the operation is ongoing `ready` will be 0.


Reading errors
--------------

This module allows to check the locations of errors in the memory.
It scans the configured memory area and compares the values read to
the predefined pattern. If `skip_fifo` is 0, this module will stop
after each error encountered and will wait until the error offset
is read from the `error_offset` CSR. Setting `skip_fifo` to 1 will
disable this behaviour.

The final nubmer of errors can be read from `error_count`.
NOTE: This value represents the number of erroneous *DMA transfers*.

The current progress can be read from the `done` CSR.


Register Listing for READER
---------------------------

+--------------------------------------------------+-----------------------------------------+
| Register                                         | Address                                 |
+==================================================+=========================================+
| :ref:`READER_START <READER_START>`               | :ref:`0x00006000 <READER_START>`        |
+--------------------------------------------------+-----------------------------------------+
| :ref:`READER_READY <READER_READY>`               | :ref:`0x00006004 <READER_READY>`        |
+--------------------------------------------------+-----------------------------------------+
| :ref:`READER_COUNT <READER_COUNT>`               | :ref:`0x00006008 <READER_COUNT>`        |
+--------------------------------------------------+-----------------------------------------+
| :ref:`READER_DONE <READER_DONE>`                 | :ref:`0x0000600c <READER_DONE>`         |
+--------------------------------------------------+-----------------------------------------+
| :ref:`READER_MEM_MASK <READER_MEM_MASK>`         | :ref:`0x00006010 <READER_MEM_MASK>`     |
+--------------------------------------------------+-----------------------------------------+
| :ref:`READER_DATA_MASK <READER_DATA_MASK>`       | :ref:`0x00006014 <READER_DATA_MASK>`    |
+--------------------------------------------------+-----------------------------------------+
| :ref:`READER_ERROR_COUNT <READER_ERROR_COUNT>`   | :ref:`0x00006018 <READER_ERROR_COUNT>`  |
+--------------------------------------------------+-----------------------------------------+
| :ref:`READER_SKIP_FIFO <READER_SKIP_FIFO>`       | :ref:`0x0000601c <READER_SKIP_FIFO>`    |
+--------------------------------------------------+-----------------------------------------+
| :ref:`READER_ERROR_OFFSET <READER_ERROR_OFFSET>` | :ref:`0x00006020 <READER_ERROR_OFFSET>` |
+--------------------------------------------------+-----------------------------------------+
| :ref:`READER_ERROR_READY <READER_ERROR_READY>`   | :ref:`0x00006024 <READER_ERROR_READY>`  |
+--------------------------------------------------+-----------------------------------------+

READER_START
^^^^^^^^^^^^

`Address: 0x00006000 + 0x0 = 0x00006000`

    Write to the register starts the transfer (if ready=1)

    .. wavedrom::
        :caption: READER_START

        {
            "reg": [
                {"name": "start", "bits": 1},
                {"bits": 31},
            ], "config": {"hspace": 400, "bits": 32, "lanes": 4 }, "options": {"hspace": 400, "bits": 32, "lanes": 4}
        }


READER_READY
^^^^^^^^^^^^

`Address: 0x00006000 + 0x4 = 0x00006004`

    Indicates that the transfer is not ongoing

    .. wavedrom::
        :caption: READER_READY

        {
            "reg": [
                {"name": "ready", "bits": 1},
                {"bits": 31},
            ], "config": {"hspace": 400, "bits": 32, "lanes": 4 }, "options": {"hspace": 400, "bits": 32, "lanes": 4}
        }


READER_COUNT
^^^^^^^^^^^^

`Address: 0x00006000 + 0x8 = 0x00006008`

    Desired number of DMA transfers

    .. wavedrom::
        :caption: READER_COUNT

        {
            "reg": [
                {"name": "count[31:0]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_DONE
^^^^^^^^^^^

`Address: 0x00006000 + 0xc = 0x0000600c`

    Number of completed DMA transfers

    .. wavedrom::
        :caption: READER_DONE

        {
            "reg": [
                {"name": "done[31:0]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_MEM_MASK
^^^^^^^^^^^^^^^

`Address: 0x00006000 + 0x10 = 0x00006010`

    DRAM address mask for DMA transfers

    .. wavedrom::
        :caption: READER_MEM_MASK

        {
            "reg": [
                {"name": "mem_mask[31:0]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_DATA_MASK
^^^^^^^^^^^^^^^^

`Address: 0x00006000 + 0x14 = 0x00006014`

    Pattern memory address mask

    .. wavedrom::
        :caption: READER_DATA_MASK

        {
            "reg": [
                {"name": "data_mask[31:0]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_ERROR_COUNT
^^^^^^^^^^^^^^^^^^

`Address: 0x00006000 + 0x18 = 0x00006018`

    Number of errors detected

    .. wavedrom::
        :caption: READER_ERROR_COUNT

        {
            "reg": [
                {"name": "error_count[31:0]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_SKIP_FIFO
^^^^^^^^^^^^^^^^

`Address: 0x00006000 + 0x1c = 0x0000601c`

    Skip waiting for user to read the errors FIFO

    .. wavedrom::
        :caption: READER_SKIP_FIFO

        {
            "reg": [
                {"name": "skip_fifo", "bits": 1},
                {"bits": 31},
            ], "config": {"hspace": 400, "bits": 32, "lanes": 4 }, "options": {"hspace": 400, "bits": 32, "lanes": 4}
        }


READER_ERROR_OFFSET
^^^^^^^^^^^^^^^^^^^

`Address: 0x00006000 + 0x20 = 0x00006020`

    Current offset of the error

    .. wavedrom::
        :caption: READER_ERROR_OFFSET

        {
            "reg": [
                {"name": "error_offset[31:0]", "bits": 32}
            ], "config": {"hspace": 400, "bits": 32, "lanes": 1 }, "options": {"hspace": 400, "bits": 32, "lanes": 1}
        }


READER_ERROR_READY
^^^^^^^^^^^^^^^^^^

`Address: 0x00006000 + 0x24 = 0x00006024`

    Error detected and ready to read

    .. wavedrom::
        :caption: READER_ERROR_READY

        {
            "reg": [
                {"name": "error_ready", "bits": 1},
                {"bits": 31},
            ], "config": {"hspace": 400, "bits": 32, "lanes": 4 }, "options": {"hspace": 400, "bits": 32, "lanes": 4}
        }


